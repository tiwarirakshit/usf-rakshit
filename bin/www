#!/usr/bin/env node
/**
 * Module dependencies.
 */
// A tool to find an open port or domain socket on the machine
const portfinder = require('portfinder');
const cluster = require('cluster');
require('dotenv').config();
// comment below line to start cluster with maximum workers
let workers = 1;
// uncomment below line to start cluster with maximum workers
// const workers = process.env.WORKERS || require('os').cpus().length;
let port = process.env.PORT || 3007;
let portSpan = 999;

// if (cluster.isMaster) {
//   portfinder.getPort({
//     port: port,    // minimum port number
//     stopPort: port + portSpan // maximum port number
//   }, function (err, openPort) {
//     if (err) throw err;
//     port = openPort;
//     process.env['PORT'] = openPort;
//     console.log('Server will start on port ' + port);
//     console.log('Master cluster is running on %s with %s workers', process.pid, workers);
//     for (var i = 0; i < workers; ++i) {
//       var worker = cluster.fork().process;
//       console.log('worker %s on %s started', i+1, worker.pid);
//     }
//     cluster.on('exit', function(worker, code, signal) {
//       console.log('worker %s died. restarting...', worker.process.pid);
//       cluster.fork();
//     });
//   });
// }

// if (cluster.isWorker) {
const app = require('../app');
const debug = require('debug')('node-express-mongodb-project:server');
const http = require('http');
const ON_DEATH = require('death');
const db = require('../dbconfig');
/**
 * Get port from environment and store in Express.
 */
// port = normalizePort(process.env['PORT']);
app.set('port', port);
/**
 * Create HTTP server.
 */
const server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/**
 * Event listener for HTTP server "close" event.
 * It sets the callback on SIGINT, SIGQUIT & SIGTERM.
 */
ON_DEATH(function (signal, err) {
  db.close();
  console.log('\nAll connections in the pool have ended');
  console.log('Server is going down now...');
  server.close();
  process.exit();
});
console.log('Node-Express-MongoDB-Server Started on http://localhost:' + port + '\n');
// }
